python.exec("MyApi.ChangesetCreate({u\"comment\": u\"Si prova\"})")
python.exec("MyApi.ChangesetCreate({u\"comment\": u\"Si prova\"})")
python.exec("MyApi.ChangesetCreate()")
library(httr)
oauth_endpoints("twitter")
class(oauth_endpoints("twitter")
)
str(oauth_endpoints("twitter")
)
str(oauth_endpoints("openstreetmap")
)
PUT
w1="http://www.openstreetmap.org/oauth/request_token"
w2="http://www.openstreetmap.org/oauth/access_token"
w3="http://www.openstreetmap.org/oauth/authorize"
str(oauth_endpoints("twitter")
)
b=oauth_endpoints("twitter")
b
b[[1]]
oauth_endpoints("openstreetmap")=oauth_endpoints("twitter")
b[[1]]
b[[1]]=w1
b[[2]]=w2
b[[3]]=w3
b
b[[2]]=w3
b[[3]]=w2
b
saveRDS(b,"oauth_osm.rds")
b
myapp <- oauth_app("twitter",
key = "TYrWFPkFAkn4G5BbkWINYw",
secret = "qjOkmKYU9kWfUFWmekJuu5tztE9aEfLbt26WlhZL8"
)
myapp
alfosm <- oauth_app("alfosm",
key = "lR4Mdtpv1xN4OuajO8JxYfbTa2MHpNZ7XDVzm2dR",
secret = "izVGv0dS8VQ7QR0M442UK9GukWVMpSsao3di2I3g"
)
alfosm
saveRDS(alfosm,"app_alf_osm.rds")
twitter_token <- oauth1.0_token(b, alfosm)
dir()
dir()
twitter_token <- oauth1.0_token(b, alfosm)
twitter_token
str(twitter_token)
class(twitter_token)
str(twitter_token)
openstreetmap = oauth_endpoint(base_url = "http://www.openstreetmap.org/oauth",
"request_token", "authorize", "access_token")
dev.openstreetmap = oauth_endpoint(base_url = "http://api06.dev.openstreetmap.org/oauth",
"request_token", "authorize", "access_token")
library(httr)
openstreetmap = oauth_endpoint(base_url = "http://www.openstreetmap.org/oauth",
"request_token", "authorize", "access_token")
dev.openstreetmap = oauth_endpoint(base_url = "http://api06.dev.openstreetmap.org/oauth",
"request_token", "authorize", "access_token")
openstreetmap
openstreetmap_oauth = oauth_endpoint(base_url = "http://www.openstreetmap.org/oauth",
"request_token", "authorize", "access_token")
dev.openstreetmap_oauth = oauth_endpoint(base_url = "http://api06.dev.openstreetmap.org/oauth",
"request_token", "authorize", "access_token")
app_alf_osm=readRDS("app_alf_osm.rds")
osm_token <- oauth1.0_token(openstreetmap_oauth,app_alf_osm)
osm_token
req <- GET("http://api.openstreetmap.org/api/0.6/node/3269585910",config(token = osm_token ))
req
content(req)
library(jsonlite)
library(XML)
req <- content(GET("http://api.openstreetmap.org/api/0.6/node/3269585910",config(token = osm_token )))
req
req <- content(GET("http://api.openstreetmap.org/api/0.6/node/3269585910",config(token = osm_token )),type="text/xml")
req
data <- xmlParse(req)
data <- xmlParse(req)
req
x <- read_xml(req)
x <- xml2::read_xml(req)
req
TextConnection(req)
zz=textConnection(req)
zz=textConnection(as.character(req))
class8req)
class(req)
req
as(req, "character")
getNodeSet(req  "//node")
getNodeSet(req ,"//node")
getNodeSet(req ,"//tag")
getNodeSet(req ,"//tag")[[1]]
getNodeSet(req ,"//tag")[[1]]$v
xmlToList(req)
changeset_ex='<osm>
<changeset>
<tag k=\"created_by\" v=\"Rosm\"/>
<tag k=\"comment\" v=\"Just adding some streetnames\"/></changeset></osm>
</osm>';
changeset_ex
cat(changeset_ex)
req2 <- PUT("http://api.openstreetmap.org/api/0.6/changeset/create",body =changeset_ex,config(token = osm_token ))
req2
changeset_ex='<?xml version="1.0" encoding="UTF-8"?>
<osm version="0.6" generator="Rosm">
<tag k=\"created_by\" v=\"Rosm\"/>
<tag k=\"comment\" v=\"my changeset commen\"/></changeset></osm>
</osm>';
changeset_ex
req2 <- PUT("http://api.openstreetmap.org/api/0.6/changeset/create",body =changeset_ex,config(token = osm_token ))
req2
changeset_ex='<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<osm version=\"0.6\" generator="Rosm">
<tag k=\"created_by\" v=\"Rosm\"/>
<tag k=\"comment\" v=\"my changeset commen\"/></changeset></osm>
</osm>';
req2 <- PUT("http://api.openstreetmap.org/api/0.6/changeset/create",body =changeset_ex,config(token = osm_token ))
req2
changeset_ex='<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<osm version=\"0.6\" generator=\"Rosm\">
<tag k=\"created_by\" v=\"Rosm\"/>
<tag k=\"comment\" v=\"my changeset commen\"/></changeset></osm>
</osm>';
req2 <- PUT("http://api.openstreetmap.org/api/0.6/changeset/create",body =changeset_ex,config(token = osm_token ))
req2
changeset_ex='<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<osm version=\"0.6\" generator=\"Rosm\">
<tag k=\"created_by\" v=\"Rosm\"/>
<tag k=\"comment\" v=\"my changeset comment\"/>
</changeset>
</osm>';
req2 <- PUT("http://api.openstreetmap.org/api/0.6/changeset/create",body =changeset_ex,config(token = osm_token ))
req2
changeset_ex='<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<osm version=\"0.6\" generator=\"Rosm\">
<changeset>
<tag k=\"created_by\" v=\"Rosm\"/>
<tag k=\"comment\" v=\"my changeset comment\"/>
</changeset>
</osm>';
req2 <- PUT("http://api.openstreetmap.org/api/0.6/changeset/create",body =changeset_ex,config(token = osm_token ))
req2
content(req2)
id_chageset=content(req2)
req3 <- GET("http://api.openstreetmap.org/api/0.6/changeset/33835810",config(token = osm_token ))
req3
req
dir()
library("rTwChannel", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
remove.packages("rTwChannel", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("alfcrisci/rTwChannel")
remove.packages("rTwChannel", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("alfcrisci/rTwChannel")
library(rTwChannel)
setwd("/home/alf/Scrivania/lav_ubu_grasso/newanalisys")
#########################################################################################
# Load periods
period_channels=read.csv("period_channels.csv")
writeWorksheetToFile("period_channels.xls", period_channels, sheet="period_channels")
library(XLConnect)
writeWorksheetToFile("period_channels.xls", period_channels, sheet="period_channels")
analitic_full_LIG=readRDS("analitic_full_LIG.rds")
analitic_full_TOS=readRDS("analitic_full_TOS.rds")
analitic_full_PIE=readRDS("analitic_full_PIE.rds")
#########################################################################################
# Analisys full  tweets
an_full_allertameteoLIG=readRDS("an_full_allertameteoLIG.rds")
an_full_allertameteoTOS=readRDS("an_full_allertameteoTOS.rds")
an_full_allertameteoPIE=readRDS("an_full_allertameteoPIE.rds")
#########################################################################################
# Analisys only original tweets
an_native_allertameteoLIG=readRDS("an_native_allertameteoLIG.rds")
an_native_allertameteoTOS=readRDS("an_native_allertameteoTOS.rds")
an_native_allertameteoPIE=readRDS("an_native_allertameteoPIE.rds")
################################################################################à
# load list of annotation for each category of hash and authors
res_notes_LIG_hash=readRDS("res_notes_LIG_hash.rds")
res_notes_TOS_hash=readRDS("res_notes_TOS_hash.rds")
res_notes_PIE_hash=readRDS("res_notes_PIE_hash.rds")
res_notes_LIG_authors=readRDS("res_notes_LIG_authors.rds")
res_notes_TOS_authors=readRDS("res_notes_TOS_authors.rds")
res_notes_PIE_authors=readRDS("res_notes_PIE_authors.rds")
################################################################################à
# load full annotation for hash and authors
full_notes_LIG_hash=readRDS("full_notes_LIG_hash.rds")
full_notes_TOS_hash=readRDS("full_notes_TOS_hash.rds")
full_notes_PIE_hash=readRDS("full_notes_PIE_hash.rds")
full_notes_LIG_authors=readRDS("full_notes_LIG_authors.rds")
full_notes_TOS_authors=readRDS("full_notes_TOS_authors.rds")
full_notes_PIE_authors=readRDS("full_notes_PIE_authors.rds")
full_notes_PIE_hash=readRDS("full_notes_PIE_hash.rds")
res_notes_PIE_hash
?create_full_notes
full_notes_PIE_hash=create_full_notes(res_notes_PIE_hash, label = FALSE)
full_notes_PIE_hash
full_notes_PIE_authors
saveRDS(full_notes_PIE_hash,"full_notes_PIE_hash.rds")
full_notes_PIE_hash=readRDS("full_notes_PIE_hash.rds")
full_notes_TOS_hash
full_notes_PIE_hash
class(full_notes_TOS_hash)
class(full_notes_PIE_hash)
setwd("/home/alf/Scrivania/lav_ubu_grasso/newanalisys/full")
stat_notes_hash_LIG=list()
for ( i in seq_along(res_notes_LIG_hash))
{ notes_temp=res_notes_LIG_hash[[i]]
notes_temp=notes_temp[!duplicated(notes_temp),]
stat_notes_hash_LIG[[i]]=stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
}
saveRDS(stat_notes_hash_LIG,"stat_notes_hash_LIG.rds")
i=3
notes_temp=res_notes_LIG_hash[[i]]
notes_temp
notes_temp=notes_temp[!duplicated(notes_temp),]
class(notes_temp)
stat_notes_hash_LIG[[i]]=stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
notes=notes_temp
an_full_allertameteoLIG$hash_date
x=an_full_allertameteoLIG$hash_date
x[,2]=tolower(x[,2])
label_notes=notes$y[1]
x_unique=unique(x)
elements=gsub("^@","",x[,2])
elements_unique=gsub("^@","",x_unique[,2])
mapnotes=notes[elements]
mapnotes_unique=notes[elements_unique]
mapnotes$data=x$data
mapnotes_unique$data=x_unique$data
mapnotes=na.omit(mapnotes)
mapnotes_unique=na.omit(mapnotes_unique)
freq_day=mapnotes[,.N,by = data]
freq_day_unique=mapnotes_unique[,.N,by = data]
res=list()
res$df=data.frame(freq_day$data,freq_day$N)
res$df_unique=data.frame(freq_day_unique$data,freq_day_unique$N)
names(res$df)<-c("date",label_notes)
names(res$df_unique)<-c("date",label_notes)
res$N=nrow(na.omit(mapnotes))
res$N_sumuniquedate=nrow(na.omit(mapnotes_unique))
return(res)
res
stat_notes_hash_LIG[[i]]=res
stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
stat_notes(x,notes)
x[,2]=tolower(x[,2])
label_notes=notes$y[1]
x_unique=unique(x)
elements=gsub("^@","",x[,2])
elements_unique=gsub("^@","",x_unique[,2])
mapnotes=notes[elements]
mapnotes_unique=notes[elements_unique]
mapnotes$data=x$data
mapnotes_unique$data=x_unique$data
mapnotes=na.omit(mapnotes)
mapnotes_unique=na.omit(mapnotes_unique)
freq_day=mapnotes[,.N,by = data]
res$df=data.frame(freq_day$data,freq_day$N)
res$df_unique=data.frame(freq_day_unique$data,freq_day_unique$N)
names(res$df)<-c("date",label_notes)
names(res$df_unique)<-c("date",label_notes)
res$N=nrow(na.omit(mapnotes))
res$N_sumuniquedate=nrow(na.omit(mapnotes_unique))
stat_notes=function(x,notes) {
require(qdap)
require(qdapTools)
x[,2]=tolower(x[,2])
label_notes=notes$y[1]
x_unique=unique(x)
elements=gsub("^@","",x[,2])
elements_unique=gsub("^@","",x_unique[,2])
mapnotes=notes[elements]
mapnotes_unique=notes[elements_unique]
mapnotes$data=x$data
mapnotes_unique$data=x_unique$data
mapnotes=na.omit(mapnotes)
mapnotes_unique=na.omit(mapnotes_unique)
freq_day=mapnotes[,.N,by = data]
freq_day_unique=mapnotes_unique[,.N,by = data]
res=list()
res$df=data.frame(freq_day$data,freq_day$N)
res$df_unique=data.frame(freq_day_unique$data,freq_day_unique$N)
names(res$df)<-c("date",label_notes)
names(res$df_unique)<-c("date",label_notes)
res$N=nrow(na.omit(mapnotes))
res$N_sumuniquedate=nrow(na.omit(mapnotes_unique))
return(res)
}
stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
rTwChannel::stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
mapnotes
freq_day
aggregate(mapnotes$data,list(mapnotes$data))
aggregate(mapnotes$data,list(mapnotes$data),sum)
aggregate(mapnotes$data,list(mapnotes$data),FUN=count)
aggregate(mapnotes$data,list(mapnotes$data),FUN=sum
)
table(mapnotes$data)
as.data.matrix(table(mapnotes$data))
as.data.frame.matrix(table(mapnotes$data))
as.matrix(table(mapnotes$data))
as.data.frame.matrix(table(mapnotes$data))
as.data.frame(as.matrix(table(mapnotes$data)))
b=as.data.frame(as.matrix(table(mapnotes$data)))
b
names(b)
stat_notes=function(x,notes) {
require(qdap)
require(qdapTools)
x[,2]=tolower(x[,2])
label_notes=notes$y[1]
x_unique=unique(x)
elements=gsub("^@","",x[,2])
elements_unique=gsub("^@","",x_unique[,2])
mapnotes=notes[elements]
mapnotes_unique=notes[elements_unique]
mapnotes$data=x$data
mapnotes_unique$data=x_unique$data
mapnotes=na.omit(mapnotes)
mapnotes_unique=na.omit(mapnotes_unique)
freq_day=as.data.frame(as.matrix(table(mapnotes$data)))
freq_day$data=rownames(freq_day)
rownames(freq_day)<-NULL
freq_day_unique=as.data.frame(as.matrix(table(mapnotes_unique$data)))
freq_day_unique$data=rownames(freq_day_unique)
rownames(freq_day_unique)<-NULL
res=list()
res$df=data.frame(freq_day$data,freq_day$N)
res$df_unique=data.frame(freq_day_unique$data,freq_day_unique$N)
names(res$df)<-c("date",label_notes)
names(res$df_unique)<-c("date",label_notes)
res$N=nrow(na.omit(mapnotes))
res$N_sumuniquedate=nrow(na.omit(mapnotes_unique))
return(res)
}
stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
stat_notes=function(x,notes) {
require(qdap)
require(qdapTools)
x[,2]=tolower(x[,2])
label_notes=notes$y[1]
x_unique=unique(x)
elements=gsub("^@","",x[,2])
elements_unique=gsub("^@","",x_unique[,2])
mapnotes=notes[elements]
mapnotes_unique=notes[elements_unique]
mapnotes$data=x$data
mapnotes_unique$data=x_unique$data
mapnotes=na.omit(mapnotes)
mapnotes_unique=na.omit(mapnotes_unique)
freq_day=as.data.frame(as.matrix(table(mapnotes$data)))
names(freq_day)=c("N")
freq_day$data=rownames(freq_day)
rownames(freq_day)<-NULL
freq_day_unique=as.data.frame(as.matrix(table(mapnotes_unique$data)))
names(freq_day_unique)=c("N")
freq_day_unique$data=rownames(freq_day_unique)
rownames(freq_day_unique)<-NULL
res=list()
res$df=data.frame(freq_day$data,freq_day$N)
res$df_unique=data.frame(freq_day_unique$data,freq_day_unique$N)
names(res$df)<-c("date",label_notes)
names(res$df_unique)<-c("date",label_notes)
res$N=nrow(na.omit(mapnotes))
res$N_sumuniquedate=nrow(na.omit(mapnotes_unique))
return(res)
}
stat_notes=function(x,notes) {
require(qdap)
require(qdapTools)
suppressWarnings()
x[,2]=tolower(x[,2])
label_notes=notes$y[1]
x_unique=unique(x)
elements=gsub("^@","",x[,2])
elements_unique=gsub("^@","",x_unique[,2])
mapnotes=notes[elements]
mapnotes_unique=notes[elements_unique]
mapnotes$data=x$data
mapnotes_unique$data=x_unique$data
mapnotes=na.omit(mapnotes)
mapnotes_unique=na.omit(mapnotes_unique)
freq_day=as.data.frame(as.matrix(table(mapnotes$data)))
names(freq_day)=c("N")
freq_day$data=rownames(freq_day)
rownames(freq_day)<-NULL
freq_day_unique=as.data.frame(as.matrix(table(mapnotes_unique$data)))
names(freq_day_unique)=c("N")
freq_day_unique$data=rownames(freq_day_unique)
rownames(freq_day_unique)<-NULL
res=list()
res$df=data.frame(freq_day$data,freq_day$N)
res$df_unique=data.frame(freq_day_unique$data,freq_day_unique$N)
names(res$df)<-c("date",label_notes)
names(res$df_unique)<-c("date",label_notes)
res$N=nrow(na.omit(mapnotes))
res$N_sumuniquedate=nrow(na.omit(mapnotes_unique))
return(res)
}
stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
option(warn)
options(warn)
stat_notes=function(x,notes) {
require(qdap)
require(qdapTools)
options( warn = 2 )
x[,2]=tolower(x[,2])
label_notes=notes$y[1]
x_unique=unique(x)
elements=gsub("^@","",x[,2])
elements_unique=gsub("^@","",x_unique[,2])
mapnotes=notes[elements]
mapnotes_unique=notes[elements_unique]
mapnotes$data=x$data
mapnotes_unique$data=x_unique$data
mapnotes=na.omit(mapnotes)
mapnotes_unique=na.omit(mapnotes_unique)
freq_day=as.data.frame(as.matrix(table(mapnotes$data)))
names(freq_day)=c("N")
freq_day$data=rownames(freq_day)
rownames(freq_day)<-NULL
freq_day_unique=as.data.frame(as.matrix(table(mapnotes_unique$data)))
names(freq_day_unique)=c("N")
freq_day_unique$data=rownames(freq_day_unique)
rownames(freq_day_unique)<-NULL
res=list()
res$df=data.frame(freq_day$data,freq_day$N)
res$df_unique=data.frame(freq_day_unique$data,freq_day_unique$N)
names(res$df)<-c("date",label_notes)
names(res$df_unique)<-c("date",label_notes)
res$N=nrow(na.omit(mapnotes))
res$N_sumuniquedate=nrow(na.omit(mapnotes_unique))
return(res)
}
stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
stat_notes=function(x,notes) {
require(qdap)
require(qdapTools)
options( warn = -1)
x[,2]=tolower(x[,2])
label_notes=notes$y[1]
x_unique=unique(x)
elements=gsub("^@","",x[,2])
elements_unique=gsub("^@","",x_unique[,2])
mapnotes=notes[elements]
mapnotes_unique=notes[elements_unique]
mapnotes$data=x$data
mapnotes_unique$data=x_unique$data
mapnotes=na.omit(mapnotes)
mapnotes_unique=na.omit(mapnotes_unique)
freq_day=as.data.frame(as.matrix(table(mapnotes$data)))
names(freq_day)=c("N")
freq_day$data=rownames(freq_day)
rownames(freq_day)<-NULL
freq_day_unique=as.data.frame(as.matrix(table(mapnotes_unique$data)))
names(freq_day_unique)=c("N")
freq_day_unique$data=rownames(freq_day_unique)
rownames(freq_day_unique)<-NULL
res=list()
res$df=data.frame(freq_day$data,freq_day$N)
res$df_unique=data.frame(freq_day_unique$data,freq_day_unique$N)
names(res$df)<-c("date",label_notes)
names(res$df_unique)<-c("date",label_notes)
res$N=nrow(na.omit(mapnotes))
res$N_sumuniquedate=nrow(na.omit(mapnotes_unique))
return(res)
}
stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
sin("fava")
log(0)
stat_notes=function(x,notes) {
require(qdap)
require(qdapTools)
options( warn = -1)
x[,2]=tolower(x[,2])
label_notes=notes$y[1]
x_unique=unique(x)
elements=gsub("^@","",x[,2])
elements_unique=gsub("^@","",x_unique[,2])
mapnotes=notes[elements]
mapnotes_unique=notes[elements_unique]
mapnotes$data=x$data
mapnotes_unique$data=x_unique$data
mapnotes=na.omit(mapnotes)
mapnotes_unique=na.omit(mapnotes_unique)
freq_day=as.data.frame(as.matrix(table(mapnotes$data)))
names(freq_day)=c("N")
freq_day$data=rownames(freq_day)
rownames(freq_day)<-NULL
freq_day_unique=as.data.frame(as.matrix(table(mapnotes_unique$data)))
names(freq_day_unique)=c("N")
freq_day_unique$data=rownames(freq_day_unique)
rownames(freq_day_unique)<-NULL
res=list()
res$df=data.frame(freq_day$data,freq_day$N)
res$df_unique=data.frame(freq_day_unique$data,freq_day_unique$N)
names(res$df)<-c("date",label_notes)
names(res$df_unique)<-c("date",label_notes)
res$N=nrow(na.omit(mapnotes))
res$N_sumuniquedate=nrow(na.omit(mapnotes_unique))
return(res)
options(warn=0)
}
stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
stat_notes_hash_LIG=list()
for ( i in seq_along(res_notes_LIG_hash))
{ notes_temp=res_notes_LIG_hash[[i]]
notes_temp=notes_temp[!duplicated(notes_temp),]
stat_notes_hash_LIG[[i]]=stat_notes(an_full_allertameteoLIG$hash_date,notes_temp)
}
remove.packages("rTwChannel", lib="~/R/x86_64-pc-linux-gnu-library/3.2")
devtools::install_github("alfcrisci/rTwChannel")
